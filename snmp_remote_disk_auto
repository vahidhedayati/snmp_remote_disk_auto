#!/bin/bash

# This script takes:
# <host> <community> <megs>

snmpwalk="/usr/bin/snmpwalk"
snmpget="/usr/bin/snmpget"

function usage() { 
echo "$0 localhost public 100"
echo "where localhost is server"
echo "public is snmp pass"
echo "100 is when it reaches below a 100Mb"
echo "-----------------------------------"
echo "define threshold below limit specific for partitions i.e. boot can be 50mb where as /var I guess we want to catch it at around 1 gig so"
echo "$0 localhost public  1024"

}


server=$1;
pass=$2
limit=$3;

errors_found="";
partitions_found="";
lower_limit=10;


if [ $# -lt 3 ]; then
    usage;
    exit 1;
fi

# takes <size> <used> <allocation>
calc_free() {
  echo "$1 $2 - $3 * 1024 / 1024 / p" | dc
}

	for partitions in $($snmpwalk -v2c -c $pass -Oq $server  hrStorageDescr|grep /|awk '{print $NF}'); do
		if [[ $partitions =~ /boot ]]; then
			limit=$lower_limit;
		fi
		if result=$($snmpwalk -v2c -c $pass -Oq $server hrStorageDescr | grep "$partitions$"); then
			index=$(echo $result | sed 's/.*hrStorageDescr//' | sed 's/ .*//')
			args=$($snmpget -v2c -c $pass -Oqv $server hrStorageSize$index hrStorageUsed$index hrStorageAllocationUnits$index | while read oid j ; do printf " $oid" ; done)
			free=$(calc_free$args)
			if [ "$free" -gt "$limit" ]
			then
				partitions_found=$partitions_found" $partitions ($free MB)"
			else
				errors_found=$errors_found" $partitions ($free MB)"
				
			fi
	
		else
			 errors_found=$errors_found" $paritions does_not_exist_or_snmp_is_not_responding"
		fi
	done

	if [ "$errors_found" == "" ]; then
		echo "OK: $partitions_found"
		exit 0
	else
		echo "CRITICAL: $errors_found";
		exit 2;
	fi
